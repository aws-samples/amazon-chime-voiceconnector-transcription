{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Transform": "AWS::Serverless-2016-10-31",
  "Description": "Resources to process Chime Voice Connector audio from KVS, transcribe, and save output to DynamoDB table",
  "Parameters": {
    "SolutionType": {
      "Description": "The type of solution to do transcription",
      "Type": "String",
      "Default": "ECS",
      "AllowedValues": ["ECS", "LAMBDA"]
    },
    "DockerImage": {
      "Description": "The name of image in ECR",
      "Type": "String",
      "Default": "amazon/amazon-chime-voiceconnector-transcription:latest"
    },
    "KeyPairName": {
      "Description": "The name of KeyPair which is used to ssh into EC2 instance",
      "Type": "String",
      "Default": ""
    },
    "ECSImageId": {
      "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
      "Description": "AMI Id of ECS Instance",
      "Default": "/aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id"
    }
  },
  "Conditions": {
    "HasKeyName": {
      "Fn::Not": [{
        "Fn::Equals": ["", {"Ref": "KeyPairName"}]
      }]
    },
    "CreateLambda": {
      "Fn::Equals": ["LAMBDA", {"Ref": "SolutionType"}]
    },
    "CreateECS": {
      "Fn::Equals": ["ECS", {"Ref": "SolutionType"}]
    }
  },
  "Resources": {
    "RecordingBucket": {
      "Type": "AWS::S3::Bucket",
      "DeletionPolicy": "Retain",
      "Properties": {
        "BucketName": {
          "Fn::Sub": "callrecordings-${AWS::Region}-${AWS::AccountId}"
        },
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "TranscriptionTable": {
      "Type": "AWS::DynamoDB::Table",
      "DeletionPolicy": "Retain",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "TransactionId",
            "AttributeType": "S"
          },
          {
            "AttributeName": "StartTime",
            "AttributeType": "N"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "TransactionId",
            "KeyType": "HASH"
          },
          {
            "AttributeName": "StartTime",
            "KeyType": "RANGE"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": "5",
          "WriteCapacityUnits": "5"
        },
        "TableName": "TranscriptSegment",
        "StreamSpecification": {
          "StreamViewType": "NEW_IMAGE"
        }
      }
    },
    "EventSQS": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "QueueName": {
          "Fn::Sub": "ChimeVCStreamingTranscription-${AWS::Region}-${AWS::AccountId}"
        },
        "VisibilityTimeout": 1800
      }
    },
    "SendEventToSQSRule": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "EventPattern": {
          "source": [
            "aws.chime"
          ],
          "detail-type": [
            "Chime VoiceConnector Streaming Status"
          ]
        },
        "Targets": [
          {
            "Id": 1,
            "Arn": {
              "Fn::GetAtt": [
                "EventSQS",
                "Arn"
              ]
            }
          }
        ]
      }
    },
    "EventSQSSendEventPolicy": {
      "Type": "AWS::SQS::QueuePolicy",
      "Properties": {
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Id": "GrantSendEventPermission",
          "Statement": [
            {
              "Sid": "1",
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "events.amazonaws.com"
                ]
              },
              "Action": [
                "sqs:SendMessage"
              ],
              "Resource": {
                "Fn::GetAtt": [
                  "EventSQS",
                  "Arn"
                ]
              },
              "Condition": {
                "ArnEquals": {
                  "AWS:SourceArn": {
                    "Fn::GetAtt": [
                      "SendEventToSQSRule",
                      "Arn"
                    ]
                  }
                }
              }
            }
          ]
        },
        "Queues": [
          {
            "Ref": "EventSQS"
          }
        ]
      }
    },
    "TranscribeTaskCluster": {
      "Condition": "CreateECS",
      "Type": "AWS::ECS::Cluster",
      "Properties": {
        "ClusterName": "transcribe-task-cluster"
      }
    },
    "TranscribeTaskLogGroup": {
      "Condition": "CreateECS",
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": {
          "Fn::Sub": "/ecs/transcribe-task-${AWS::Region}-${AWS::AccountId}"
        },
        "RetentionInDays": 180
      }
    },
    "TranscribeImageRepository": {
      "Condition": "CreateECS",
      "Type": "AWS::ECR::Repository",
      "Properties": {
        "RepositoryName": "chime-transcribe"
      }
    },
    "TranscribeTaskDefinition": {
      "Condition": "CreateECS",
      "DependsOn": ["TranscribeTaskLogGroup"],
      "Type": "AWS::ECS::TaskDefinition",
      "Properties": {
        "ContainerDefinitions": [
          {
            "EntryPoint": ["java","-cp",".:/tmp/chime-streaming-transcribe/lib/*","com.amazonaws.kvstranscribestreaming.docker.KVSTranscribeStreamingDocker"],
            "Image": {
              "Ref": "DockerImage"
            },
            "WorkingDirectory": "/tmp/chime-streaming-transcribe/",
            "Memory": "1024",
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Ref": "TranscribeTaskLogGroup"
                },
                "awslogs-region": {
                  "Ref": "AWS::Region"
                },
                "awslogs-stream-prefix": "ecs"
              }
            },
            "Name": "transcribe-container"
          }
        ],
        "Cpu": "2048",
        "Memory": "2048",
        "ExecutionRoleArn": {
          "Fn::GetAtt": ["TranscribeTaskExecutionRole", "Arn"]
        },
        "NetworkMode": "host",
        "TaskRoleArn": {
          "Fn::GetAtt": ["TranscribeTaskExecutionRole", "Arn"]
        }
      }
    },
    "TranscribeTaskExecutionRole": {
      "Condition": "CreateECS",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Sid": "",
              "Effect": "Allow",
              "Principal": {
                "Service": "ecs-tasks.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/AmazonKinesisVideoStreamsReadOnlyAccess",
          "arn:aws:iam::aws:policy/AmazonTranscribeFullAccess",
          "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy",
          "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess",
          "arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess"
        ],
        "Policies": [
          {
            "PolicyName": "inline",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:ListBucket"
                  ],
                  "Resource": {
                    "Fn::GetAtt": [
                      "RecordingBucket",
                      "Arn"
                    ]
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:PutObject",
                    "s3:GetObject",
                    "s3:DeleteObject"
                  ],
                  "Resource": {
                    "Fn::Join": [ "", [
                      "arn:aws:s3:::", {
                        "Ref": "RecordingBucket"
                      },
                      "/*"
                    ]
                    ]
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "cloudwatch:Put*",
                    "cloudwatch:Get*",
                    "cloudwatch:List*"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      },
      "Type": "AWS::IAM::Role"
    },
    "SendRunTaskRequestExecutionRole": {
      "Condition": "CreateECS",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
          "arn:aws:iam::aws:policy/AmazonECS_FullAccess",
          "arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole"
        ]
      },
      "Type": "AWS::IAM::Role"
    },
    "SendRunTaskRequestLambdaFunction": {
      "Condition": "CreateECS",
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "AutoPublishAlias": "Provisioned",
        "ProvisionedConcurrencyConfig" : {
          "ProvisionedConcurrentExecutions" : 2
        },
        "CodeUri": "./amazon-chime-voiceconnector-recordandtranscribe.zip",
        "Environment": {
          "Variables": {
            "CLUSTER_NAME": {
              "Ref": "TranscribeTaskCluster"
            },
            "IS_TRANSCRIBE_ENABLED": "true",
            "RECORDINGS_BUCKET_NAME": {
              "Ref": "RecordingBucket"
            },
            "TASK_DEFINITION": {
              "Ref": "TranscribeTaskDefinition"
            },
            "CONTAINER_NAME": "transcribe-container",
            "TRANSCRIBE_API_GATEWAY_APIID": {
              "Ref": "TranscriptionWebSocketAPI"
            },
            "TRANSCRIBE_API_GATEWAY_STAGE": {
              "Ref": "TranscriptionWebSocketAPIStage"
            },
            "WEBSOCKET_MAPPING_TABLE_NAME": {
              "Ref": "TranscriptionWebsocketMappingTable"
            }
          }
        },
        "Handler": "com.amazonaws.kvstranscribestreaming.lambda.SendRunTaskRequestLambda::handleRequest",
        "Role": {
          "Fn::GetAtt": [
            "SendRunTaskRequestExecutionRole",
            "Arn"
          ]
        },
        "Events": {
          "EventQueue": {
            "Type": "SQS",
            "Properties": {
              "Queue": {
                "Fn::GetAtt": [
                  "EventSQS",
                  "Arn"
                ]
              },
              "BatchSize": 1
            }
          }
        },
        "Runtime": "java11",
        "MemorySize": 1024,
        "Timeout": 10
      }
    },
    "Vpc": {
      "Condition": "CreateECS",
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "true"
      }
    },
    "PubSubnetAz": {
      "Condition": "CreateECS",
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "CidrBlock": "10.0.0.0/24",
        "AvailabilityZone": {
          "Fn::Sub": "${AWS::Region}a"
        },
        "MapPublicIpOnLaunch": true
      }
    },
    "InternetGateway": {
      "Condition": "CreateECS",
      "Type": "AWS::EC2::InternetGateway"
    },
    "AttachGateway": {
      "Condition": "CreateECS",
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "RouteViaIgw": {
      "Condition": "CreateECS",
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        }
      }
    },
    "PublicRouteViaIgw": {
      "Condition": "CreateECS",
      "Type": "AWS::EC2::Route",
      "DependsOn": "AttachGateway",
      "Properties": {
        "RouteTableId": {
          "Ref": "RouteViaIgw"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "PubSubnetRouteTableAssociation": {
      "Condition": "CreateECS",
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PubSubnetAz"
        },
        "RouteTableId": {
          "Ref": "RouteViaIgw"
        }
      }
    },
    "EcsSecurityGroup": {
      "Condition": "CreateECS",
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "ECS Allowed Ports",
        "VpcId": {
          "Ref": "Vpc"
        },
        "SecurityGroupIngress": {
          "IpProtocol": "tcp",
          "FromPort": "0",
          "ToPort": "65535",
          "CidrIp": "0.0.0.0/0"
        }
      }
    },
    "IAMInstanceRole": {
      "Condition": "CreateECS",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Sid": "",
              "Effect": "Allow",
              "Principal": {
                "Service": "ec2.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ],
          "Version": "2012-10-17"
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"
        ]
      },
      "Type": "AWS::IAM::Role"
    },
    "ContainerHostProfile": {
      "Condition": "CreateECS",
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [ {
          "Ref": "IAMInstanceRole"
        } ]
      }
    },
    "EcsInstanceLc": {
      "Condition": "CreateECS",
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "ImageId": {
          "Ref": "ECSImageId"
        },
        "InstanceType": "c5.4xlarge",
        "AssociatePublicIpAddress": true,
        "SecurityGroups": [
          {
            "Ref": "EcsSecurityGroup"
          }
        ],
        "KeyName": {
          "Fn::If": [
            "HasKeyName", {"Ref": "KeyPairName"}, {"Ref": "AWS::NoValue"}
          ]
        },
        "IamInstanceProfile": {
          "Ref": "ContainerHostProfile"
        },
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvda",
            "Ebs": {
              "VolumeSize": 30,
              "VolumeType": "gp2"
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                "cat > /etc/ecs/ecs.config << EOF\n",
                "ECS_CLUSTER=",
                {
                  "Ref": "TranscribeTaskCluster"
                }, "\n",
                "ECS_BACKEND_HOST=\n",
                "ECS_IMAGE_PULL_BEHAVIOR=prefer-cached\n",
                "EOF"
              ]
            ]
          }
        }
      }
    },
    "EcsInstanceAsg": {
      "Condition": "CreateECS",
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "VPCZoneIdentifier": [{
          "Ref": "PubSubnetAz"
        }],
        "LaunchConfigurationName": {
          "Ref": "EcsInstanceLc"
        },
        "MinSize": "1",
        "MaxSize": "1",
        "DesiredCapacity": "1",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "ECS Instance - ${AWS::StackName}"
            },
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "Description",
            "Value": "This instance is the part of the Auto Scaling group which was created through ECS Console",
            "PropagateAtLaunch": "true"
          }
        ]
      }
    },
    "LambdaRole": {
      "Condition": "CreateLambda",
      "Type": "AWS::IAM::Role",
      "Properties": {
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole",
          "arn:aws:iam::aws:policy/AmazonKinesisVideoStreamsReadOnlyAccess",
          "arn:aws:iam::aws:policy/AmazonTranscribeFullAccess",
          "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess",
          "arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess"
        ],
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "sts:AssumeRole"
              ],
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "inline",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:ListBucket"
                  ],
                  "Resource": {
                    "Fn::GetAtt": [
                      "RecordingBucket",
                      "Arn"
                    ]
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:PutObject",
                    "s3:GetObject",
                    "s3:DeleteObject"
                  ],
                  "Resource": {
                    "Fn::Join": [ "", [
                      "arn:aws:s3:::", {
                        "Ref": "RecordingBucket"
                      },
                      "/*"
                    ]
                    ]
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "cloudwatch:Put*",
                    "cloudwatch:Get*",
                    "cloudwatch:List*"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "MainLambdaFunction": {
      "Condition": "CreateLambda",
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "AutoPublishAlias": "Provisioned",
        "MemorySize": 1024,
        "Timeout": 900,
        "Handler": "com.amazonaws.kvstranscribestreaming.lambda.KVSTranscribeStreamingLambda::handleRequest",
        "Runtime": "java11",
        "CodeUri": "./amazon-chime-voiceconnector-recordandtranscribe.zip",
        "Role": {
          "Fn::GetAtt": [
            "LambdaRole",
            "Arn"
          ]
        },
        "Environment": {
          "Variables": {
            "IS_TRANSCRIBE_ENABLED": "true",
            "RECORDINGS_BUCKET_NAME": {
              "Ref": "RecordingBucket"
            },
            "TRANSCRIBE_API_GATEWAY_APIID": {
              "Ref": "TranscriptionWebSocketAPI"
            },
            "TRANSCRIBE_API_GATEWAY_STAGE": {
              "Ref": "TranscriptionWebSocketAPIStage"
            },
            "WEBSOCKET_MAPPING_TABLE_NAME": {
              "Ref": "TranscriptionWebsocketMappingTable"
            }
          }
        },
        "Events": {
          "EventQueue": {
            "Type": "SQS",
            "Properties": {
              "Queue": {
                "Fn::GetAtt": [
                  "EventSQS",
                  "Arn"
                ]
              },
              "BatchSize": 1
            }
          }
        },
        "ProvisionedConcurrencyConfig" : {
          "ProvisionedConcurrentExecutions" : 2
        }
      }
    },
    "TranscriptionWebsocketMappingTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "Number",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "Number",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": "5",
          "WriteCapacityUnits": "5"
        },
        "TableName": "TranscriptionWebsocketMappingTable"
      }
    },
    "TranscriptionWebsocketConnectionTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "ConnectionId",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "ConnectionId",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": "5",
          "WriteCapacityUnits": "5"
        },
        "TableName": "TranscriptionWebsocketConnectionTable"
      }
    },
    "TranscriptionWebSocketIntegrationFunctionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess",
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "sts:AssumeRole"
              ],
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ]
        }
      }
    },
    "TranscriptionWebSocketIntegrationFunctionPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "TranscriptionWebSocketIntegrationFunction"
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "TranscriptionWebSocketAPI"
              },
              "/",
              "TranscriptionWebSocketAPIStage",
              "/*/*"
            ]
          ]
        }
      }
    },
    "TranscriptionWebSocketIntegrationFunction": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "CodeUri": "./amazon-chime-voiceconnector-recordandtranscribe.zip",
        "Environment": {
          "Variables": {
            "WEB_SOCKET_MAPPING_TABLE": {
              "Ref": "TranscriptionWebsocketMappingTable"
            },
            "WEB_SOCKET_CONNECTION_TABLE": {
              "Ref": "TranscriptionWebsocketConnectionTable"
            },
            "TRANSCRIBE_ROUTE_KEY": "transcribe"
          }
        },
        "Handler": "com.amazonaws.kvstranscribestreaming.lambda.TranscriptionWebSocketIntegrationLambda::handleRequest",
        "Role": {
          "Fn::GetAtt": [
            "TranscriptionWebSocketIntegrationFunctionRole",
            "Arn"
          ]
        },
        "Runtime": "java11",
        "MemorySize": 512,
        "Timeout": 10
      }
    },
    "TranscriptionWebSocketIntegrationRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaRole"
        ],
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "sts:AssumeRole"
              ],
              "Principal": {
                "Service": [
                  "apigateway.amazonaws.com"
                ]
              }
            }
          ]
        }
      }
    },
    "TranscriptionWebSocketAPI": {
      "Type": "AWS::ApiGatewayV2::Api",
      "Properties": {
        "CredentialsArn": {
          "Fn::GetAtt": ["TranscriptionWebSocketIntegrationRole", "Arn"]
        },
        "Name": "TranscriptWebSocketTransmission",
        "ProtocolType": "WEBSOCKET",
        "RouteSelectionExpression": "${request.body.service}",
        "ApiKeySelectionExpression": "$request.header.x-api-key"
      }
    },
    "TranscriptionWebSocketLambdaIntegration": {
      "Type": "AWS::ApiGatewayV2::Integration",
      "Properties": {
        "ApiId": {
          "Ref": "TranscriptionWebSocketAPI"
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":apigateway:",
              {
                "Ref": "AWS::Region"
              },
              ":lambda:path/2015-03-31/functions/",
              {
                "Fn::GetAtt": ["TranscriptionWebSocketIntegrationFunction", "Arn"]
              },
              "/invocations"
            ]
          ]
        },
        "CredentialsArn": {
          "Fn::GetAtt": ["TranscriptionWebSocketIntegrationRole", "Arn"]
        },
        "IntegrationMethod": "POST",
        "ConnectionType": "INTERNET"
      }
    },
    "TranscriptionWebSocketAPITranscribeRoute": {
      "Type": "AWS::ApiGatewayV2::Route",
      "DependsOn": [
        "TranscriptionWebSocketLambdaIntegration"
      ],
      "Properties": {
        "ApiId": {
          "Ref": "TranscriptionWebSocketAPI"
        },
        "RouteKey": "transcribe",
        "AuthorizationType": "NONE",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "TranscriptionWebSocketLambdaIntegration"
              }
            ]
          ]
        }
      }
    },
    "TranscriptionWebSocketAPIRouteResponse": {
      "Type": "AWS::ApiGatewayV2::RouteResponse",
      "Properties": {
        "RouteId": {
          "Ref": "TranscriptionWebSocketAPITranscribeRoute"
        },
        "ApiId": {
          "Ref": "TranscriptionWebSocketAPI"
        },
        "RouteResponseKey": "$default"
      }
    },
    "TranscriptionWebSocketAPIConnectRoute": {
      "Type": "AWS::ApiGatewayV2::Route",
      "DependsOn": [
        "TranscriptionWebSocketLambdaIntegration"
      ],
      "Properties": {
        "ApiId": {
          "Ref": "TranscriptionWebSocketAPI"
        },
        "RouteKey": "$connect",
        "AuthorizationType": "NONE",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "TranscriptionWebSocketLambdaIntegration"
              }
            ]
          ]
        }
      }
    },
    "TranscriptionWebSocketAPIDisconnectRoute": {
      "Type": "AWS::ApiGatewayV2::Route",
      "DependsOn": [
        "TranscriptionWebSocketLambdaIntegration"
      ],
      "Properties": {
        "ApiId": {
          "Ref": "TranscriptionWebSocketAPI"
        },
        "RouteKey": "$disconnect",
        "AuthorizationType": "NONE",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "TranscriptionWebSocketLambdaIntegration"
              }
            ]
          ]
        }
      }
    },
    "TranscriptionWebSocketAPIDefaultRoute": {
      "Type": "AWS::ApiGatewayV2::Route",
      "DependsOn": [
        "TranscriptionWebSocketLambdaIntegration"
      ],
      "Properties": {
        "ApiId": {
          "Ref": "TranscriptionWebSocketAPI"
        },
        "RouteKey": "$default",
        "AuthorizationType": "NONE",
        "Target": {
          "Fn::Join": [
            "/",
            [
              "integrations",
              {
                "Ref": "TranscriptionWebSocketLambdaIntegration"
              }
            ]
          ]
        }
      }
    },
    "TranscriptionWebSocketAPIDeployment": {
      "Type": "AWS::ApiGatewayV2::Deployment",
      "DependsOn": ["TranscriptionWebSocketAPIDisconnectRoute", "TranscriptionWebSocketAPIConnectRoute", "TranscriptionWebSocketAPITranscribeRoute", "TranscriptionWebSocketAPIDefaultRoute"],
      "Properties": {
        "ApiId": {
          "Ref": "TranscriptionWebSocketAPI"
        }
      }
    },
    "TranscriptionWebSocketAPIStage": {
      "Type": "AWS::ApiGatewayV2::Stage",
      "Properties": {
        "StageName": "Beta",
        "DeploymentId": {
          "Ref": "TranscriptionWebSocketAPIDeployment"
        },
        "ApiId": {
          "Ref": "TranscriptionWebSocketAPI"
        }
      }
    }
  },
  "Outputs": {
    "TranscriptionWebSocketAPIURL": {
      "Description": "The url to receive transcription. ",
      "Value": {
        "Fn::Join": [
          "",
          [
            "wss://",
            {
              "Ref": "TranscriptionWebSocketAPI"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".amazonaws.com/",
            {
              "Ref": "TranscriptionWebSocketAPIStage"
            }
          ]
        ]
      },
      "Export": {
        "Name": "TranscriptionWebSocketAPIURL"
      }
    },
    "TranscriptionWebSocketConnectionURL": {
      "Description": "The url to POST transcription to api gateway.",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "TranscriptionWebSocketAPI"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".amazonaws.com/",
            {
              "Ref": "TranscriptionWebSocketAPIStage"
            },
            "/@connections"
          ]
        ]
      },
      "Export": {
        "Name": "TranscriptionWebSocketConnectionURL"
      }
    }
  }
}